/* SECTION 1 - OPTIONS */

options { 
    JAVA_UNICODE_ESCAPE = true;

    // CCAL is not case sensitive
    IGNORE_CASE = true;
}

/* SECTION 2 - USER CODE */

import java.io.FileNotFoundException;
import java.io.FileInputStream;

PARSER_BEGIN(CCALParser)

public class CCALParser {
    
    public static void main(String args[]) {
        
        // Initialize the parser to read
        CCALParser parser;

        if (args.length == 0) {
            System.out.println("Reading from standard input...");
            parser = new CCALParser(System.in);
        } else if (args.length == 1) {
            try {
                parser = new CCALParser(new FileInputStream(args[0]));
            } catch (FileNotFoundException err) {
                System.err.println("File " + args[0] + " not found");
                return;
            }
        } else {
            System.out.println("CCAL Parser: Usage is one of:");
            System.out.println("    java CCALParser < inputfile");
            System.out.println("OR");
            System.out.println("    java CCALParser inputfile");
            return;
        }

        // Try to parse the file
        try {
            parser.program();
            System.out.println("File parsed successfully");
        } catch (ParseException err) {
            System.out.println(err.getMessage());
            System.out.println("Encountered the above errors while parsing the file");
        }
    }
}

PARSER_END(CCALParser)

/* SECTION 3 - TOKENS */

TOKEN_MGR_DECLS : {
    static int commentNesting;
}

// Skip whitespace, newline, form feed, verticle and horizontal tabs
SKIP : {
      " "
    | "\n"
    | "\t"
    | "\f"
    | "\v"
    | "\r"
}

// Skip comments
SKIP : {
      < "//" ([" "-"~"])* ("\n" | "\r" | "\r\n") >
    | "/*" { commentNesting++; } : IN_COMMENT
}

<IN_COMMENT> SKIP : {
      "/*" { commentNesting++; }
    | "*/" {
        commentNesting--;
        if (commentNesting == 0) {
            SwitchTo(DEFAULT);
        }
    }
    // Anything not recognized (everything else)
    | <~[]>
}


// Keywords
TOKEN: {
      < VAR : "var" >
    | < CONST : "const" >
    | < RETURN : "return" >
    | < INT : "integer" >
    | < BOOL : "BOOLEAN" >
    | < VOID : "void" >
    | < MAIN: "main" >
    | < IF : "if" >
    | < ELSE : "else" >
    | < TRUE : "true" >
    | < FALSE: "false" >
    | < WHILE : "while" >
    | < SKP : "skip" >
    | < COMMA : "," >
    | < SEMIC : ";" >
    | < COLON : ":" >
    | < ASSIGN : "=" >
    | < LBRAC : "{" >
    | < RBRAC : "}" >
    | < LPAREN : "(" >
    | < RPAREN : ")" >
    | < ADD : "+" >
    | < SUB : "-" >
    | < TILD : "~" > 
    | < OR : "||" >
    | < AND : "&&" >
    | < EQUAL : "==" >
    | < NOT_EQUAL : "!=" >
    | < LESS_THAN : "<" >
    | < LESS_EQUAL : "<=" >
    | < GRTR_THAN : ">" >
    | < GRTR_EQUAL : ">=" >
}

TOKEN : {
      < #DIGIT : ["0"-"9"] >
    | < NUMBER : ("-")* ["1"-"9"] (DIGIT)* | "0" >
    | < #LETTER : ["a"-"z""A"-"Z"] >
    | < IDENT : <LETTER> (<LETTER>  | "_" | <DIGIT>)* >
}

// Everything else not recognised yet
TOKEN : {
    < OTHER : ~[] >
}