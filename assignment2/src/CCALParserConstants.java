/* Generated By:JJTree&JavaCC: Do not edit this line. CCALParserConstants.java */

/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface CCALParserConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int VAR = 11;
  /** RegularExpression Id. */
  int CONST = 12;
  /** RegularExpression Id. */
  int RETURN = 13;
  /** RegularExpression Id. */
  int INT = 14;
  /** RegularExpression Id. */
  int BOOL = 15;
  /** RegularExpression Id. */
  int VOID = 16;
  /** RegularExpression Id. */
  int MAIN = 17;
  /** RegularExpression Id. */
  int IF = 18;
  /** RegularExpression Id. */
  int ELSE = 19;
  /** RegularExpression Id. */
  int TRUE = 20;
  /** RegularExpression Id. */
  int FALSE = 21;
  /** RegularExpression Id. */
  int WHILE = 22;
  /** RegularExpression Id. */
  int SKP = 23;
  /** RegularExpression Id. */
  int COMMA = 24;
  /** RegularExpression Id. */
  int SEMIC = 25;
  /** RegularExpression Id. */
  int COLON = 26;
  /** RegularExpression Id. */
  int ASSIGN = 27;
  /** RegularExpression Id. */
  int LBRAC = 28;
  /** RegularExpression Id. */
  int RBRAC = 29;
  /** RegularExpression Id. */
  int LPAREN = 30;
  /** RegularExpression Id. */
  int RPAREN = 31;
  /** RegularExpression Id. */
  int ADD = 32;
  /** RegularExpression Id. */
  int MIN = 33;
  /** RegularExpression Id. */
  int NEGATE = 34;
  /** RegularExpression Id. */
  int OR = 35;
  /** RegularExpression Id. */
  int AND = 36;
  /** RegularExpression Id. */
  int EQUAL = 37;
  /** RegularExpression Id. */
  int NOT_EQUAL = 38;
  /** RegularExpression Id. */
  int LESS_THAN = 39;
  /** RegularExpression Id. */
  int LESS_THAN_EQUAL = 40;
  /** RegularExpression Id. */
  int GRTR_THAN = 41;
  /** RegularExpression Id. */
  int GRTR_THAN_EQUAL = 42;
  /** RegularExpression Id. */
  int DIGIT = 43;
  /** RegularExpression Id. */
  int NUMBER = 44;
  /** RegularExpression Id. */
  int LETTER = 45;
  /** RegularExpression Id. */
  int IDENT = 46;

  /** Lexical state. */
  int DEFAULT = 0;
  /** Lexical state. */
  int IN_COMMENT = 1;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\n\"",
    "\"\\t\"",
    "\"\\f\"",
    "\"\\r\"",
    "<token of kind 6>",
    "\"/*\"",
    "\"/*\"",
    "\"*/\"",
    "<token of kind 10>",
    "\"var\"",
    "\"const\"",
    "\"return\"",
    "\"integer\"",
    "\"boolean\"",
    "\"void\"",
    "\"main\"",
    "\"if\"",
    "\"else\"",
    "\"true\"",
    "\"false\"",
    "\"while\"",
    "\"skip\"",
    "\",\"",
    "\";\"",
    "\":\"",
    "\"=\"",
    "\"{\"",
    "\"}\"",
    "\"(\"",
    "\")\"",
    "\"+\"",
    "\"-\"",
    "\"~\"",
    "\"||\"",
    "\"&&\"",
    "\"==\"",
    "\"!=\"",
    "\"<\"",
    "\"<=\"",
    "\">\"",
    "\">=\"",
    "<DIGIT>",
    "<NUMBER>",
    "<LETTER>",
    "<IDENT>",
  };

}
