/* Generated By:JJTree&JavaCC: Do not edit this line. CCALParser.java */
import java.io.FileNotFoundException;
import java.io.FileInputStream;

public class CCALParser/*@bgen(jjtree)*/implements CCALParserTreeConstants, CCALParserConstants {/*@bgen(jjtree)*/
  protected static JJTCCALParserState jjtree = new JJTCCALParserState();
    static SymbolTable st = new SymbolTable();
    static String scope = "global";

    public static void main(String args[]) {

        // Initialize the parser to read
        CCALParser parser;

        if (args.length == 0) {
            System.out.println("Reading from standard input...");
            parser = new CCALParser(System.in);
        } else if (args.length == 1) {
            try {
                parser = new CCALParser(new FileInputStream(args[0]));
            } catch (FileNotFoundException err) {
                System.err.println("File " + args[0] + " not found");
                return;
            }
        } else {
            System.out.println("CCAL Parser: Usage is one of:");
            System.out.println("    java CCALParser < inputfile");
            System.out.println("OR");
            System.out.println("    java CCALParser inputfile");
            return;
        }

        // Try to parse the file
        try {
            st.printStack();

            SimpleNode root = parser.program();
            root.dump("");

            st.printStack();

            SemanticCheckVisitor visitor = new SemanticCheckVisitor();
            root.jjtAccept(visitor, "");

            IRCodeVisitor IRVisitor = new IRCodeVisitor();
            root.jjtAccept(IRVisitor, "");

            System.out.println("File parsed successfully");
        } catch (ParseException err) {
            System.out.println(err.getMessage());
            System.out.println("Encountered the above errors while parsing the file");
        }
    }

/***********************************
***** SECTION 4 - THE GRAMMAR *****
***********************************/
  static final public SimpleNode program() throws ParseException {
                                 /*@bgen(jjtree) Program */
  Program jjtn000 = new Program(JJTPROGRAM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      declList();
      functionList();
      main();
                                       jjtree.closeNodeScope(jjtn000, true);
                                       jjtc000 = false;
                                       {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
    throw new Error("Missing return statement in function");
  }

  static final public void declList() throws ParseException {
                             /*@bgen(jjtree) DeclList */
  DeclList jjtn000 = new DeclList(JJTDECLLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case VAR:
      case CONST:
        decl();
        jj_consume_token(SEMIC);
        declList();
        break;
      default:
        jj_la1[0] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  static final public void decl() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case VAR:
      varDecl();
      break;
    case CONST:
      constDecl();
      break;
    default:
      jj_la1[1] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void varDecl() throws ParseException {
                           /*@bgen(jjtree) VarDecl */
                           VarDecl jjtn000 = new VarDecl(JJTVARDECL);
                           boolean jjtc000 = true;
                           jjtree.openNodeScope(jjtn000);Token t; String id; String type;
    try {
      t = jj_consume_token(VAR);
      id = lIdent();
      jj_consume_token(COLON);
      type = type();
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  static final public void constDecl() throws ParseException {
                               /*@bgen(jjtree) ConstDecl */
                               ConstDecl jjtn000 = new ConstDecl(JJTCONSTDECL);
                               boolean jjtc000 = true;
                               jjtree.openNodeScope(jjtn000);Token t; String id; String type;
    try {
      t = jj_consume_token(CONST);
      id = lIdent();
      jj_consume_token(COLON);
      type = type();
      jj_consume_token(ASSIGN);
      expression();
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  static final public void functionList() throws ParseException {
                                     /*@bgen(jjtree) FunctionList */
  FunctionList jjtn000 = new FunctionList(JJTFUNCTIONLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INT:
      case BOOL:
      case VOID:
        function();
        functionList();
        break;
      default:
        jj_la1[2] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  static final public void function() throws ParseException {
                            /*@bgen(jjtree) Function */
                            Function jjtn000 = new Function(JJTFUNCTION);
                            boolean jjtc000 = true;
                            jjtree.openNodeScope(jjtn000);String type; String id;
    try {
      type = type();
      id = lIdent();
                                  scope = id;
      jj_consume_token(LPAREN);
      paramList();
      jj_consume_token(RPAREN);
      openBlock();
      declList();
      statementBlock();
      jj_consume_token(RETURN);
      jj_consume_token(LPAREN);
      returnStatement();
      jj_consume_token(RPAREN);
      jj_consume_token(SEMIC);
      closeBlock();
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  static final public void returnStatement() throws ParseException {
                                  /*@bgen(jjtree) Return */
  Return jjtn000 = new Return(JJTRETURN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TRUE:
      case FALSE:
      case LPAREN:
      case MIN:
      case NUMBER:
      case IDENT:
        expression();
        break;
      default:
        jj_la1[3] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  static final public String type() throws ParseException {
                      /*@bgen(jjtree) Type */
                      Type jjtn000 = new Type(JJTTYPE);
                      boolean jjtc000 = true;
                      jjtree.openNodeScope(jjtn000);Token t;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INT:
        t = jj_consume_token(INT);
                    jjtree.closeNodeScope(jjtn000, true);
                    jjtc000 = false;
                   jjtn000.value = t.image; {if (true) return t.image;}
        break;
      case BOOL:
        t = jj_consume_token(BOOL);
                     jjtree.closeNodeScope(jjtn000, true);
                     jjtc000 = false;
                    jjtn000.value = t.image; {if (true) return t.image;}
        break;
      case VOID:
        t = jj_consume_token(VOID);
                     jjtree.closeNodeScope(jjtn000, true);
                     jjtc000 = false;
                    jjtn000.value = t.image; {if (true) return t.image;}
        break;
      default:
        jj_la1[4] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
        if (jjtc000) {
          jjtree.closeNodeScope(jjtn000, true);
        }
    }
    throw new Error("Missing return statement in function");
  }

  static final public void paramList() throws ParseException {
                               /*@bgen(jjtree) ParamList */
  ParamList jjtn000 = new ParamList(JJTPARAMLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENT:
        nempParamList();
        break;
      default:
        jj_la1[5] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  static final public void nempParamList() throws ParseException {
                                       /*@bgen(jjtree) NempParamList */
                                       NempParamList jjtn000 = new NempParamList(JJTNEMPPARAMLIST);
                                       boolean jjtc000 = true;
                                       jjtree.openNodeScope(jjtn000);String id; String type;
    try {
      id = lIdent();
      jj_consume_token(COLON);
      type = type();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        jj_consume_token(COMMA);
        nempParamList();
        break;
      default:
        jj_la1[6] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  static final public void main() throws ParseException {
                     /*@bgen(jjtree) Main */
  Main jjtn000 = new Main(JJTMAIN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(MAIN);
      openBlock();
      declList();
      statementBlock();
      closeBlock();
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
     st.closeScope();
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  static final public void statementBlock() throws ParseException {
                                         /*@bgen(jjtree) StatementBlock */
  StatementBlock jjtn000 = new StatementBlock(JJTSTATEMENTBLOCK);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IF:
      case WHILE:
      case SKP:
      case LBRAC:
      case IDENT:
        statement();
        statementBlock();
        break;
      default:
        jj_la1[7] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  static final public void statement() throws ParseException {
                    Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENT:
      lIdent();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ASSIGN:
        t = jj_consume_token(ASSIGN);
        expression();
        jj_consume_token(SEMIC);
                                                    Assignment jjtn001 = new Assignment(JJTASSIGNMENT);
                                                    boolean jjtc001 = true;
                                                    jjtree.openNodeScope(jjtn001);
        try {
                                                    jjtree.closeNodeScope(jjtn001,  2);
                                                    jjtc001 = false;
                                                   jjtn001.value = t.image;
        } finally {
                                                    if (jjtc001) {
                                                      jjtree.closeNodeScope(jjtn001,  2);
                                                    }
        }
        break;
      case LPAREN:
        jj_consume_token(LPAREN);
        argList();
        jj_consume_token(RPAREN);
                                                                                                                            FuncCall jjtn002 = new FuncCall(JJTFUNCCALL);
                                                                                                                            boolean jjtc002 = true;
                                                                                                                            jjtree.openNodeScope(jjtn002);
        try {
          jj_consume_token(SEMIC);
        } finally {
                                                                                                                            if (jjtc002) {
                                                                                                                              jjtree.closeNodeScope(jjtn002,  2);
                                                                                                                            }
        }
        break;
      default:
        jj_la1[8] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    case LBRAC:
      jj_consume_token(LBRAC);
      statementBlock();
      jj_consume_token(RBRAC);
      break;
    case IF:
      t = jj_consume_token(IF);
      condition();
      jj_consume_token(LBRAC);
      statementBlock();
      jj_consume_token(RBRAC);
      elseStatement();
                                                                              Statement jjtn003 = new Statement(JJTSTATEMENT);
                                                                              boolean jjtc003 = true;
                                                                              jjtree.openNodeScope(jjtn003);
      try {
                                                                              jjtree.closeNodeScope(jjtn003,  3);
                                                                              jjtc003 = false;
                                                                             jjtn003.value = t.image;
      } finally {
                                                                              if (jjtc003) {
                                                                                jjtree.closeNodeScope(jjtn003,  3);
                                                                              }
      }
      break;
    case WHILE:
      t = jj_consume_token(WHILE);
      condition();
      jj_consume_token(LBRAC);
      statementBlock();
      jj_consume_token(RBRAC);
                                                                 Statement jjtn004 = new Statement(JJTSTATEMENT);
                                                                 boolean jjtc004 = true;
                                                                 jjtree.openNodeScope(jjtn004);
      try {
                                                                 jjtree.closeNodeScope(jjtn004,  2);
                                                                 jjtc004 = false;
                                                                jjtn004.value = t.image;
      } finally {
                                                                 if (jjtc004) {
                                                                   jjtree.closeNodeScope(jjtn004,  2);
                                                                 }
      }
      break;
    case SKP:
      jj_consume_token(SKP);
              Skip jjtn005 = new Skip(JJTSKIP);
              boolean jjtc005 = true;
              jjtree.openNodeScope(jjtn005);
      try {
        jj_consume_token(SEMIC);
      } finally {
              if (jjtc005) {
                jjtree.closeNodeScope(jjtn005, true);
              }
      }
      break;
    default:
      jj_la1[9] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void elseStatement() throws ParseException {
                        Token t;
    t = jj_consume_token(ELSE);
    jj_consume_token(LBRAC);
    statementBlock();
    jj_consume_token(RBRAC);
                                                  Statement jjtn001 = new Statement(JJTSTATEMENT);
                                                  boolean jjtc001 = true;
                                                  jjtree.openNodeScope(jjtn001);
    try {
                                                  jjtree.closeNodeScope(jjtn001,  1);
                                                  jjtc001 = false;
                                                 jjtn001.value = t.image;
    } finally {
                                                  if (jjtc001) {
                                                    jjtree.closeNodeScope(jjtn001,  1);
                                                  }
    }
  }

  static final public void condition() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NEGATE:
      jj_consume_token(NEGATE);
      condition();
      conditionPrime();
      break;
    case LPAREN:
      jj_consume_token(LPAREN);
      condition();
      jj_consume_token(RPAREN);
      conditionPrime();
      break;
    case TRUE:
    case FALSE:
    case MIN:
    case NUMBER:
    case IDENT:
      fragment();
      compOp();
      conditionPrime();
      break;
    default:
      jj_la1[10] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void conditionPrime() throws ParseException {
                        Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case OR:
    case AND:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AND:
        t = jj_consume_token(AND);
        break;
      case OR:
        t = jj_consume_token(OR);
        break;
      default:
        jj_la1[11] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      condition();
                                         BoolOp jjtn001 = new BoolOp(JJTBOOLOP);
                                         boolean jjtc001 = true;
                                         jjtree.openNodeScope(jjtn001);
      try {
                                         jjtree.closeNodeScope(jjtn001,  2);
                                         jjtc001 = false;
                                        jjtn001.value = t.image;
      } finally {
                                         if (jjtc001) {
                                           jjtree.closeNodeScope(jjtn001,  2);
                                         }
      }
      break;
    default:
      jj_la1[12] = jj_gen;

    }
  }

  static final public void expression() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LPAREN:
      jj_consume_token(LPAREN);
      expression();
      jj_consume_token(RPAREN);
      expressionPrime();
      break;
    case TRUE:
    case FALSE:
    case MIN:
    case NUMBER:
    case IDENT:
      fragment();
      expressionPrime();
      break;
    default:
      jj_la1[13] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void expressionPrime() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ADD:
    case MIN:
      binOp();
      expressionPrime();
      break;
    default:
      jj_la1[14] = jj_gen;

    }
  }

  static final public void fragment() throws ParseException {
                   Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENT:
      rIdent();
      fragmentPrime();
      expressionPrime();
      break;
    case MIN:
      t = jj_consume_token(MIN);
      rIdent();
                          NegateIdent jjtn001 = new NegateIdent(JJTNEGATEIDENT);
                          boolean jjtc001 = true;
                          jjtree.openNodeScope(jjtn001);
      try {
                          jjtree.closeNodeScope(jjtn001,  1);
                          jjtc001 = false;
                         jjtn001.value = t.image;
      } finally {
                          if (jjtc001) {
                            jjtree.closeNodeScope(jjtn001,  1);
                          }
      }
      expressionPrime();
      break;
    case NUMBER:
      number();
      expressionPrime();
      break;
    case TRUE:
      t = jj_consume_token(TRUE);
                  Boolean jjtn002 = new Boolean(JJTBOOLEAN);
                  boolean jjtc002 = true;
                  jjtree.openNodeScope(jjtn002);
      try {
                  jjtree.closeNodeScope(jjtn002, true);
                  jjtc002 = false;
                 jjtn002.value = t.image;
      } finally {
                  if (jjtc002) {
                    jjtree.closeNodeScope(jjtn002, true);
                  }
      }
      expressionPrime();
      break;
    case FALSE:
      t = jj_consume_token(FALSE);
                   Boolean jjtn003 = new Boolean(JJTBOOLEAN);
                   boolean jjtc003 = true;
                   jjtree.openNodeScope(jjtn003);
      try {
                   jjtree.closeNodeScope(jjtn003, true);
                   jjtc003 = false;
                  jjtn003.value = t.image;
      } finally {
                   if (jjtc003) {
                     jjtree.closeNodeScope(jjtn003, true);
                   }
      }
      expressionPrime();
      break;
    default:
      jj_la1[15] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void fragmentPrime() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LPAREN:
      jj_consume_token(LPAREN);
      argList();
                           FuncCall jjtn001 = new FuncCall(JJTFUNCCALL);
                           boolean jjtc001 = true;
                           jjtree.openNodeScope(jjtn001);
      try {
        jj_consume_token(RPAREN);
      } finally {
                           if (jjtc001) {
                             jjtree.closeNodeScope(jjtn001,  2);
                           }
      }
      break;
    default:
      jj_la1[16] = jj_gen;

    }
  }

  static final public void binOp() throws ParseException {
                Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ADD:
      t = jj_consume_token(ADD);
      expression();
                               ArithOp jjtn001 = new ArithOp(JJTARITHOP);
                               boolean jjtc001 = true;
                               jjtree.openNodeScope(jjtn001);
      try {
                               jjtree.closeNodeScope(jjtn001,  2);
                               jjtc001 = false;
                              jjtn001.value = t.image;
      } finally {
                               if (jjtc001) {
                                 jjtree.closeNodeScope(jjtn001,  2);
                               }
      }
      break;
    case MIN:
      t = jj_consume_token(MIN);
      expression();
                               ArithOp jjtn002 = new ArithOp(JJTARITHOP);
                               boolean jjtc002 = true;
                               jjtree.openNodeScope(jjtn002);
      try {
                               jjtree.closeNodeScope(jjtn002,  2);
                               jjtc002 = false;
                              jjtn002.value = t.image;
      } finally {
                               if (jjtc002) {
                                 jjtree.closeNodeScope(jjtn002,  2);
                               }
      }
      break;
    default:
      jj_la1[17] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void compOp() throws ParseException {
                 Token t;
      CompOp jjtn001 = new CompOp(JJTCOMPOP);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EQUAL:
        t = jj_consume_token(EQUAL);
        expression();
                                 jjtree.closeNodeScope(jjtn001,  2);
                                 jjtc001 = false;
                                jjtn001.value = t.image;
        break;
      case NOT_EQUAL:
        t = jj_consume_token(NOT_EQUAL);
        expression();
                                     jjtree.closeNodeScope(jjtn001,  2);
                                     jjtc001 = false;
                                    jjtn001.value = t.image;
        break;
      case LESS_THAN:
        t = jj_consume_token(LESS_THAN);
        expression();
                                     jjtree.closeNodeScope(jjtn001,  2);
                                     jjtc001 = false;
                                    jjtn001.value = t.image;
        break;
      case LESS_THAN_EQUAL:
        t = jj_consume_token(LESS_THAN_EQUAL);
        expression();
                                           jjtree.closeNodeScope(jjtn001,  2);
                                           jjtc001 = false;
                                          jjtn001.value = t.image;
        break;
      case GRTR_THAN:
        t = jj_consume_token(GRTR_THAN);
        expression();
                                     jjtree.closeNodeScope(jjtn001,  2);
                                     jjtc001 = false;
                                    jjtn001.value = t.image;
        break;
      case GRTR_THAN_EQUAL:
        t = jj_consume_token(GRTR_THAN_EQUAL);
        expression();
                                           jjtree.closeNodeScope(jjtn001,  2);
                                           jjtc001 = false;
                                          jjtn001.value = t.image;
        break;
      default:
        jj_la1[18] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte001) {
      if (jjtc001) {
        jjtree.clearNodeScope(jjtn001);
        jjtc001 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte001 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte001;}
      }
      if (jjte001 instanceof ParseException) {
        {if (true) throw (ParseException)jjte001;}
      }
      {if (true) throw (Error)jjte001;}
    } finally {
      if (jjtc001) {
        jjtree.closeNodeScope(jjtn001,  2);
      }
    }
  }

  static final public void argList() throws ParseException {
                           /*@bgen(jjtree) ArgList */
  ArgList jjtn000 = new ArgList(JJTARGLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENT:
        nempArgList();
        break;
      default:
        jj_la1[19] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  static final public void nempArgList() throws ParseException {
    rIdent();
    nempArgListPrime();
  }

  static final public void nempArgListPrime() throws ParseException {
                                    /*@bgen(jjtree) ArgList */
  ArgList jjtn000 = new ArgList(JJTARGLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        jj_consume_token(COMMA);
        nempArgList();
        break;
      default:
        jj_la1[20] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  static final public String lIdent() throws ParseException {
                           /*@bgen(jjtree) LIdent */
                           LIdent jjtn000 = new LIdent(JJTLIDENT);
                           boolean jjtc000 = true;
                           jjtree.openNodeScope(jjtn000);String s;
    try {
      s = Ident();
                  jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
                  {if (true) return s;}
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
    throw new Error("Missing return statement in function");
  }

  static final public String rIdent() throws ParseException {
                           /*@bgen(jjtree) RIdent */
                            RIdent jjtn000 = new RIdent(JJTRIDENT);
                            boolean jjtc000 = true;
                            jjtree.openNodeScope(jjtn000);String s;
    try {
      s = Ident();
                  jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
                  {if (true) return s;}
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
    throw new Error("Missing return statement in function");
  }

  static final public String Ident() throws ParseException {
                        /*@bgen(jjtree) Ident */
                        Ident jjtn000 = new Ident(JJTIDENT);
                        boolean jjtc000 = true;
                        jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(IDENT);
                    jjtree.closeNodeScope(jjtn000, true);
                    jjtc000 = false;
                   jjtn000.value = t.image; {if (true) return t.image;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
    throw new Error("Missing return statement in function");
  }

  static final public String number() throws ParseException {
                           /*@bgen(jjtree) Number */
                           Number jjtn000 = new Number(JJTNUMBER);
                           boolean jjtc000 = true;
                           jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(NUMBER);
                     jjtree.closeNodeScope(jjtn000, true);
                     jjtc000 = false;
                    jjtn000.value = t.image; {if (true) return t.image;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
    throw new Error("Missing return statement in function");
  }

  static final public void openBlock() throws ParseException {
                                 /*@bgen(jjtree) #OpenBlock(true) */
  OpenBlock jjtn000 = new OpenBlock(JJTOPENBLOCK);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(LBRAC);
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  static final public void closeBlock() throws ParseException {
                                /*@bgen(jjtree) CloseBlock */
  CloseBlock jjtn000 = new CloseBlock(JJTCLOSEBLOCK);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(RBRAC);
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public CCALParserTokenManager token_source;
  static JavaCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[21];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x1800,0x1800,0x1c000,0x40300000,0x1c000,0x0,0x1000000,0x10c40000,0x48000000,0x10c40000,0x40300000,0x0,0x0,0x40300000,0x0,0x300000,0x40000000,0x0,0x0,0x0,0x1000000,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x0,0x5002,0x0,0x4000,0x0,0x4000,0x0,0x4000,0x5006,0x18,0x18,0x5002,0x3,0x5002,0x0,0x3,0x7e0,0x4000,0x0,};
   }

  /** Constructor with InputStream. */
  public CCALParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public CCALParser(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new JavaCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new CCALParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 21; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 21; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public CCALParser(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new JavaCharStream(stream, 1, 1);
    token_source = new CCALParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 21; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 21; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public CCALParser(CCALParserTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 21; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(CCALParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 21; i++) jj_la1[i] = -1;
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[47];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 21; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 47; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

}
