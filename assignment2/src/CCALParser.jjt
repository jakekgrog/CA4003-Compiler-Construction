 /*******************************
 ***** SECTION 1 - OPTIONS *****
 *******************************/

options { 
    JAVA_UNICODE_ESCAPE = true;

    // CCAL is not case sensitive
    IGNORE_CASE = true;

    MULTI = true;
    VISITOR = true;
    NODE_DEFAULT_VOID = true;
    NODE_PREFIX = "";
}

/*********************************
 ***** SECTION 2 - USER CODE *****
 *********************************/

PARSER_BEGIN(CCALParser)

import java.io.FileNotFoundException;
import java.io.FileInputStream;

public class CCALParser {

    static SymbolTable st = new SymbolTable();
    static String scope = "global";
    
    public static void main(String args[]) {
        
        // Initialize the parser to read
        CCALParser parser;

        if (args.length == 0) {
            System.out.println("Reading from standard input...");
            parser = new CCALParser(System.in);
        } else if (args.length == 1) {
            try {
                parser = new CCALParser(new FileInputStream(args[0]));
            } catch (FileNotFoundException err) {
                System.err.println("File " + args[0] + " not found");
                return;
            }
        } else {
            System.out.println("CCAL Parser: Usage is one of:");
            System.out.println("    java CCALParser < inputfile");
            System.out.println("OR");
            System.out.println("    java CCALParser inputfile");
            return;
        }

        // Try to parse the file
        try {
            st.printStack();
            
            SimpleNode root = parser.program();
            root.dump("");
            
            st.printStack();

            SemanticCheckVisitor visitor = new SemanticCheckVisitor();
            root.jjtAccept(visitor, "");

            System.out.println("File parsed successfully");
        } catch (ParseException err) {
            System.out.println(err.getMessage());
            System.out.println("Encountered the above errors while parsing the file");
        }
    }
}

PARSER_END(CCALParser)

/*****************************************
 ***** SECTION 3 - TOKEN DEFINITIONS *****
 *****************************************/

TOKEN_MGR_DECLS : {
    static int commentNesting;
}

// Skip whitespace, newline, form feed, tabs and carriage return
SKIP : {
      " "
    | "\n"
    | "\t"
    | "\f"
    | "\r"
}

// Skip comments
SKIP : {
      < "//" ([" "-"~"])* ("\n" | "\r" | "\r\n") >
    | "/*" { commentNesting++; } : IN_COMMENT
}

<IN_COMMENT> SKIP : {
      "/*" { commentNesting++; }
    | "*/" {
        commentNesting--;
        if (commentNesting == 0) {
            SwitchTo(DEFAULT);
        }
    }
    // Anything not recognized (everything else)
    | <~[]>
}


// Reserved keywords
TOKEN: {
      < VAR : "var" >
    | < CONST : "const" >
    | < RETURN : "return" >
    | < INT : "integer" >
    | < BOOL : "boolean" >
    | < VOID : "void" >
    | < MAIN: "main" >
    | < IF : "if" >
    | < ELSE : "else" >
    | < TRUE : "true" >
    | < FALSE: "false" >
    | < WHILE : "while" >
    | < SKP : "skip" >
}


// Language tokens
TOKEN: {
      < COMMA : "," >
    | < SEMIC : ";" >
    | < COLON : ":" >
    | < ASSIGN : "=" >
    | < LBRAC : "{" >
    | < RBRAC : "}" >
    | < LPAREN : "(" >
    | < RPAREN : ")" >
    | < ADD : "+" >
    | < MIN : "-" >
    | < NEGATE : "~" > 
    | < OR : "||" >
    | < AND : "&&" >
    | < EQUAL : "==" >
    | < NOT_EQUAL : "!=" >
    | < LESS_THAN : "<" >
    | < LESS_THAN_EQUAL : "<=" >
    | < GRTR_THAN : ">" >
    | < GRTR_THAN_EQUAL : ">=" >
}

// Define what identifiers and numbers are
TOKEN : {
      < #DIGIT : ["0"-"9"] >
    | < NUMBER : ("-")* ["1"-"9"] (<DIGIT>)* | "0" >
    | < #LETTER : ["a"-"z", "A"-"Z"] >
    | < IDENT : <LETTER> (<LETTER>  | "_" | <DIGIT>)* >
}

/***********************************
***** SECTION 4 - THE GRAMMAR *****
***********************************/

SimpleNode program() #Program : {}
{
    declList() functionList() main() { return jjtThis; }
}

void declList() #DeclList : {}
{
    ( decl() <SEMIC> declList() )?
}

void decl() : {}
{
      varDecl()
    | constDecl()
}

void varDecl() #VarDecl : {Token t; String id; String type;}
{
    t = <VAR> id = ident() <COLON> type = type()
}

void constDecl() #ConstDecl : {Token t; String id; String type;}
{
    t = <CONST> id = ident() <COLON> type = type() <ASSIGN> expression()
}

void functionList() #FunctionList : {}
{
    (function() functionList())?
}

void function() #Function: {String type; String id;}
{
    (type = type() id = ident() { scope = id;} <LPAREN> paramList() <RPAREN>
    openBlock()
    declList()
    statementBlock() 
    <RETURN> <LPAREN> returnStatement() <RPAREN> <SEMIC>
    closeBlock()) {scope = "global";}
}

void returnStatement() #Return : {}
{
    (expression())?
}

String type() #Type: {Token t;}
{
      (t = <INT>) {jjtThis.value = t.image; return t.image;}
    | (t = <BOOL>) {jjtThis.value = t.image; return t.image;}
    | (t = <VOID>) {jjtThis.value = t.image; return t.image;}
}

void paramList() #ParamList : {}
{
    ( nempParamList() )?
}

void nempParamList() #NempParamList : {String id; String type;}
{
    id = ident() <COLON> type = type() (<COMMA> nempParamList())?
}

void main() #Main : {}
{
    <MAIN> openBlock()
    declList()
    statementBlock()
    closeBlock()
    {st.closeScope();} 
}

void statementBlock() #StatementBlock : {}
{
    ( statement() statementBlock() )?
}

void statement() : {Token t;}
{
      ident() (t = <ASSIGN> expression() <SEMIC> {jjtThis.value = t.image;} #Assignment(2) | <LPAREN> argList() <RPAREN> <SEMIC> #FuncCall(2))
    | <LBRAC> statementBlock() <RBRAC>
    | t = <IF> condition() <LBRAC> statementBlock() <RBRAC> elseStatement() {jjtThis.value = t.image;} #Statement(3)
    | t = <WHILE> condition() <LBRAC> statementBlock() <RBRAC> {jjtThis.value = t.image;} #Statement(2)
    | <SKP> <SEMIC> #Skip
}

void elseStatement() : {Token t;}
{
    t = <ELSE> <LBRAC> statementBlock() <RBRAC> {jjtThis.value = t.image;} #Statement(1)
}

void condition() : {}
{
      <NEGATE> condition() conditionPrime()
    | <LPAREN> condition() <RPAREN> conditionPrime()
    | fragment() compOp() conditionPrime()
}

void conditionPrime(): {Token t;}
{
    (t = <AND> | t = <OR>) condition() {jjtThis.value = t.image;} #BoolOp(2)
    | {}   
}


void expression() : {}
{
     <LPAREN> expression() <RPAREN> expressionPrime()
    |  fragment() expressionPrime()
}

void expressionPrime(): {}
{
      binOp() expressionPrime()
    | {}
}

void fragment() : {Token t;}
{
     ident() fragmentPrime() expressionPrime()
   | t = <MIN> ident() {jjtThis.value = t.image;} #NegateIdent(1) expressionPrime()
   | number() expressionPrime()
   | t = <TRUE> {jjtThis.value = t.image;} #Boolean expressionPrime()
   | t = <FALSE> {jjtThis.value = t.image;} #Boolean expressionPrime()
}

void fragmentPrime(): {}
{
      <LPAREN> argList() <RPAREN> #FuncCall(2)
    | {}
}

void binOp() : {Token t;}
{
      t = <ADD> expression() {jjtThis.value = t.image;} #ArithOp(2)
    | t = <MIN> expression() {jjtThis.value = t.image;} #ArithOp(2)
}

void compOp() : {Token t;}
{
    ( t = <EQUAL> expression() {jjtThis.value = t.image;}
    | t = <NOT_EQUAL> expression() {jjtThis.value = t.image;}
    | t = <LESS_THAN> expression() {jjtThis.value = t.image;}
    | t = <LESS_THAN_EQUAL> expression() {jjtThis.value = t.image;}
    | t = <GRTR_THAN> expression() {jjtThis.value = t.image;}
    | t = <GRTR_THAN_EQUAL> expression() {jjtThis.value = t.image;}) #CompOp(2)
}

void argList() #ArgList : {} 
{
    ( nempArgList() )?
}

void nempArgList() : {}
{
      ident() nempArgListPrime()
}

void nempArgListPrime() #ArgList : {}
{
    (<COMMA> nempArgList())?
}

String ident() #Ident : {Token t;}
{
    (t = <IDENT>) {jjtThis.value = t.image; return t.image;}
}

String number() #Number : {Token t;}
{
    (t = <NUMBER>) {jjtThis.value = t.image; return t.image;}
}

void openBlock(): {}
{
    <LBRAC> { st.openScope(); }
}

void closeBlock(): {}
{
    <RBRAC> { st.printStack(); st.closeScope(); st.printStack();}
}