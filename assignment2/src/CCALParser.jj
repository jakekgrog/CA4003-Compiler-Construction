/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. CCALParser.jj */
/*@egen*/ /*******************************
 ***** SECTION 1 - OPTIONS *****
 *******************************/

options { 
    JAVA_UNICODE_ESCAPE = true;

    // CCAL is not case sensitive
    IGNORE_CASE = true;

                 
                   
                             
                     
}

/*********************************
 ***** SECTION 2 - USER CODE *****
 *********************************/

PARSER_BEGIN(CCALParser)

import java.io.FileNotFoundException;
import java.io.FileInputStream;

public class CCALParser/*@bgen(jjtree)*/implements CCALParserTreeConstants/*@egen*/ {/*@bgen(jjtree)*/
  protected static JJTCCALParserState jjtree = new JJTCCALParserState();

/*@egen*/

    static SymbolTable st = new SymbolTable();
    static String scope = "global";
    
    public static void main(String args[]) {
        
        // Initialize the parser to read
        CCALParser parser;

        if (args.length == 0) {
            System.out.println("Reading from standard input...");
            parser = new CCALParser(System.in);
        } else if (args.length == 1) {
            try {
                parser = new CCALParser(new FileInputStream(args[0]));
            } catch (FileNotFoundException err) {
                System.err.println("File " + args[0] + " not found");
                return;
            }
        } else {
            System.out.println("CCAL Parser: Usage is one of:");
            System.out.println("    java CCALParser < inputfile");
            System.out.println("OR");
            System.out.println("    java CCALParser inputfile");
            return;
        }

        // Try to parse the file
        try {
            st.printStack();
            
            SimpleNode root = parser.program();
            root.dump("");
            
            st.printStack();

            SemanticCheckVisitor visitor = new SemanticCheckVisitor();
            root.jjtAccept(visitor, "");

            IRCodeVisitor IRVisitor = new IRCodeVisitor();
            root.jjtAccept(IRVisitor, "");

            System.out.println("File parsed successfully");
        } catch (ParseException err) {
            System.out.println(err.getMessage());
            System.out.println("Encountered the above errors while parsing the file");
        }
    }
}

PARSER_END(CCALParser)

/*****************************************
 ***** SECTION 3 - TOKEN DEFINITIONS *****
 *****************************************/

TOKEN_MGR_DECLS : {
    static int commentNesting;
}

// Skip whitespace, newline, form feed, tabs and carriage return
SKIP : {
      " "
    | "\n"
    | "\t"
    | "\f"
    | "\r"
}

// Skip comments
SKIP : {
      < "//" ([" "-"~"])* ("\n" | "\r" | "\r\n") >
    | "/*" { commentNesting++; } : IN_COMMENT
}

<IN_COMMENT> SKIP : {
      "/*" { commentNesting++; }
    | "*/" {
        commentNesting--;
        if (commentNesting == 0) {
            SwitchTo(DEFAULT);
        }
    }
    // Anything not recognized (everything else)
    | <~[]>
}


// Reserved keywords
TOKEN: {
      < VAR : "var" >
    | < CONST : "const" >
    | < RETURN : "return" >
    | < INT : "integer" >
    | < BOOL : "boolean" >
    | < VOID : "void" >
    | < MAIN: "main" >
    | < IF : "if" >
    | < ELSE : "else" >
    | < TRUE : "true" >
    | < FALSE: "false" >
    | < WHILE : "while" >
    | < SKP : "skip" >
}


// Language tokens
TOKEN: {
      < COMMA : "," >
    | < SEMIC : ";" >
    | < COLON : ":" >
    | < ASSIGN : "=" >
    | < LBRAC : "{" >
    | < RBRAC : "}" >
    | < LPAREN : "(" >
    | < RPAREN : ")" >
    | < ADD : "+" >
    | < MIN : "-" >
    | < NEGATE : "~" > 
    | < OR : "||" >
    | < AND : "&&" >
    | < EQUAL : "==" >
    | < NOT_EQUAL : "!=" >
    | < LESS_THAN : "<" >
    | < LESS_THAN_EQUAL : "<=" >
    | < GRTR_THAN : ">" >
    | < GRTR_THAN_EQUAL : ">=" >
}

// Define what identifiers and numbers are
TOKEN : {
      < #DIGIT : ["0"-"9"] >
    | < NUMBER : ("-")* ["1"-"9"] (<DIGIT>)* | "0" >
    | < #LETTER : ["a"-"z", "A"-"Z"] >
    | < IDENT : <LETTER> (<LETTER>  | "_" | <DIGIT>)* >
}

/***********************************
***** SECTION 4 - THE GRAMMAR *****
***********************************/

SimpleNode program()          : {/*@bgen(jjtree) Program */
  Program jjtn000 = new Program(JJTPROGRAM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Program */
    try {
/*@egen*/
    declList() functionList() main()/*@bgen(jjtree)*/
                                     {
                                       jjtree.closeNodeScope(jjtn000, true);
                                       jjtc000 = false;
                                     }
/*@egen*/ { return jjtn000; }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void declList()           : {/*@bgen(jjtree) DeclList */
  DeclList jjtn000 = new DeclList(JJTDECLLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) DeclList */
    try {
/*@egen*/
    ( decl() <SEMIC> declList() )?/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void decl() : {}
{
      varDecl()
    | constDecl()
}

void varDecl()          : {/*@bgen(jjtree) VarDecl */
                           VarDecl jjtn000 = new VarDecl(JJTVARDECL);
                           boolean jjtc000 = true;
                           jjtree.openNodeScope(jjtn000);
/*@egen*/Token t; String id; String type;}
{/*@bgen(jjtree) VarDecl */
    try {
/*@egen*/
    t = <VAR> id = lIdent() <COLON> type = type()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void constDecl()            : {/*@bgen(jjtree) ConstDecl */
                               ConstDecl jjtn000 = new ConstDecl(JJTCONSTDECL);
                               boolean jjtc000 = true;
                               jjtree.openNodeScope(jjtn000);
/*@egen*/Token t; String id; String type;}
{/*@bgen(jjtree) ConstDecl */
    try {
/*@egen*/
    t = <CONST> id = lIdent() <COLON> type = type() <ASSIGN> expression()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void functionList()               : {/*@bgen(jjtree) FunctionList */
  FunctionList jjtn000 = new FunctionList(JJTFUNCTIONLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) FunctionList */
    try {
/*@egen*/
    (function() functionList())?/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void function()          : {/*@bgen(jjtree) Function */
                            Function jjtn000 = new Function(JJTFUNCTION);
                            boolean jjtc000 = true;
                            jjtree.openNodeScope(jjtn000);
/*@egen*/String type; String id;}
{/*@bgen(jjtree) Function */
    try {
/*@egen*/
    type = type() id = lIdent() { scope = id;} <LPAREN> paramList() <RPAREN>
    openBlock()
    declList()
    statementBlock() 
    <RETURN> <LPAREN> returnStatement() <RPAREN> <SEMIC>
    closeBlock()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void returnStatement()         : {/*@bgen(jjtree) Return */
  Return jjtn000 = new Return(JJTRETURN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Return */
    try {
/*@egen*/
    (expression())?/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

String type()      : {/*@bgen(jjtree) Type */
                      Type jjtn000 = new Type(JJTTYPE);
                      boolean jjtc000 = true;
                      jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) Type */
      try {
/*@egen*/
      (t = <INT>)/*@bgen(jjtree)*/
                  {
                    jjtree.closeNodeScope(jjtn000, true);
                    jjtc000 = false;
                  }
/*@egen*/ {jjtn000.value = t.image; return t.image;}
    | (t = <BOOL>)/*@bgen(jjtree)*/
                   {
                     jjtree.closeNodeScope(jjtn000, true);
                     jjtc000 = false;
                   }
/*@egen*/ {jjtn000.value = t.image; return t.image;}
    | (t = <VOID>)/*@bgen(jjtree)*/
                   {
                     jjtree.closeNodeScope(jjtn000, true);
                     jjtc000 = false;
                   }
/*@egen*/ {jjtn000.value = t.image; return t.image;}/*@bgen(jjtree)*/
      } finally {
        if (jjtc000) {
          jjtree.closeNodeScope(jjtn000, true);
        }
      }
/*@egen*/
}

void paramList()            : {/*@bgen(jjtree) ParamList */
  ParamList jjtn000 = new ParamList(JJTPARAMLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ParamList */
    try {
/*@egen*/
    ( nempParamList() )?/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void nempParamList()                : {/*@bgen(jjtree) NempParamList */
                                       NempParamList jjtn000 = new NempParamList(JJTNEMPPARAMLIST);
                                       boolean jjtc000 = true;
                                       jjtree.openNodeScope(jjtn000);
/*@egen*/String id; String type;}
{/*@bgen(jjtree) NempParamList */
    try {
/*@egen*/
    id = lIdent() <COLON> type = type() (<COMMA> nempParamList())?/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void main()       : {/*@bgen(jjtree) Main */
  Main jjtn000 = new Main(JJTMAIN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Main */
    try {
/*@egen*/
    <MAIN> openBlock()
    declList()
    statementBlock()
    closeBlock()/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    {st.closeScope();}/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/ 
}

void statementBlock()                 : {/*@bgen(jjtree) StatementBlock */
  StatementBlock jjtn000 = new StatementBlock(JJTSTATEMENTBLOCK);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) StatementBlock */
    try {
/*@egen*/
    ( statement() statementBlock() )?/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void statement() : {Token t;}
{
      lIdent() (t = <ASSIGN> expression() <SEMIC>/*@bgen(jjtree) #Assignment( 2) */
                                                  {
                                                    Assignment jjtn001 = new Assignment(JJTASSIGNMENT);
                                                    boolean jjtc001 = true;
                                                    jjtree.openNodeScope(jjtn001);
                                                  }
                                                  try {
/*@egen*//*@bgen(jjtree)*/
                                                  {
                                                    jjtree.closeNodeScope(jjtn001,  2);
                                                    jjtc001 = false;
                                                  }
/*@egen*/ {jjtn001.value = t.image;}/*@bgen(jjtree)*/
                                                  } finally {
                                                    if (jjtc001) {
                                                      jjtree.closeNodeScope(jjtn001,  2);
                                                    }
                                                  }
/*@egen*/                | <LPAREN> argList() <RPAREN>/*@bgen(jjtree) #FuncCall( 2) */
                                                                                                                          {
                                                                                                                            FuncCall jjtn002 = new FuncCall(JJTFUNCCALL);
                                                                                                                            boolean jjtc002 = true;
                                                                                                                            jjtree.openNodeScope(jjtn002);
                                                                                                                          }
                                                                                                                          try {
/*@egen*/ <SEMIC>/*@bgen(jjtree)*/
                                                                                                                          } finally {
                                                                                                                            if (jjtc002) {
                                                                                                                              jjtree.closeNodeScope(jjtn002,  2);
                                                                                                                            }
                                                                                                                          }
/*@egen*/             )
    | <LBRAC> statementBlock() <RBRAC>
    | t = <IF> condition() <LBRAC> statementBlock() <RBRAC> elseStatement()/*@bgen(jjtree) #Statement( 3) */
                                                                            {
                                                                              Statement jjtn003 = new Statement(JJTSTATEMENT);
                                                                              boolean jjtc003 = true;
                                                                              jjtree.openNodeScope(jjtn003);
                                                                            }
                                                                            try {
/*@egen*//*@bgen(jjtree)*/
                                                                            {
                                                                              jjtree.closeNodeScope(jjtn003,  3);
                                                                              jjtc003 = false;
                                                                            }
/*@egen*/ {jjtn003.value = t.image;}/*@bgen(jjtree)*/
                                                                            } finally {
                                                                              if (jjtc003) {
                                                                                jjtree.closeNodeScope(jjtn003,  3);
                                                                              }
                                                                            }
/*@egen*/              
    | t = <WHILE> condition() <LBRAC> statementBlock() <RBRAC>/*@bgen(jjtree) #Statement( 2) */
                                                               {
                                                                 Statement jjtn004 = new Statement(JJTSTATEMENT);
                                                                 boolean jjtc004 = true;
                                                                 jjtree.openNodeScope(jjtn004);
                                                               }
                                                               try {
/*@egen*//*@bgen(jjtree)*/
                                                               {
                                                                 jjtree.closeNodeScope(jjtn004,  2);
                                                                 jjtc004 = false;
                                                               }
/*@egen*/ {jjtn004.value = t.image;}/*@bgen(jjtree)*/
                                                               } finally {
                                                                 if (jjtc004) {
                                                                   jjtree.closeNodeScope(jjtn004,  2);
                                                                 }
                                                               }
/*@egen*/              
    | <SKP>/*@bgen(jjtree) Skip */
            {
              Skip jjtn005 = new Skip(JJTSKIP);
              boolean jjtc005 = true;
              jjtree.openNodeScope(jjtn005);
            }
            try {
/*@egen*/ <SEMIC>/*@bgen(jjtree)*/
            } finally {
              if (jjtc005) {
                jjtree.closeNodeScope(jjtn005, true);
              }
            }
/*@egen*/      
}

void elseStatement() : {Token t;}
{
    t = <ELSE> <LBRAC> statementBlock() <RBRAC>/*@bgen(jjtree) #Statement( 1) */
                                                {
                                                  Statement jjtn001 = new Statement(JJTSTATEMENT);
                                                  boolean jjtc001 = true;
                                                  jjtree.openNodeScope(jjtn001);
                                                }
                                                try {
/*@egen*//*@bgen(jjtree)*/
                                                {
                                                  jjtree.closeNodeScope(jjtn001,  1);
                                                  jjtc001 = false;
                                                }
/*@egen*/ {jjtn001.value = t.image;}/*@bgen(jjtree)*/
                                                } finally {
                                                  if (jjtc001) {
                                                    jjtree.closeNodeScope(jjtn001,  1);
                                                  }
                                                }
/*@egen*/              
}

void condition() : {}
{
      <NEGATE> condition() conditionPrime()
    | <LPAREN> condition() <RPAREN> conditionPrime()
    | fragment() compOp() conditionPrime()
}

void conditionPrime(): {Token t;}
{
    (t = <AND> | t = <OR>) condition()/*@bgen(jjtree) #BoolOp( 2) */
                                       {
                                         BoolOp jjtn001 = new BoolOp(JJTBOOLOP);
                                         boolean jjtc001 = true;
                                         jjtree.openNodeScope(jjtn001);
                                       }
                                       try {
/*@egen*//*@bgen(jjtree)*/
                                       {
                                         jjtree.closeNodeScope(jjtn001,  2);
                                         jjtc001 = false;
                                       }
/*@egen*/ {jjtn001.value = t.image;}/*@bgen(jjtree)*/
                                       } finally {
                                         if (jjtc001) {
                                           jjtree.closeNodeScope(jjtn001,  2);
                                         }
                                       }
/*@egen*/           
    | {}   
}


void expression() : {}
{
     <LPAREN> expression() <RPAREN> expressionPrime()
    |  fragment() expressionPrime()
}

void expressionPrime(): {}
{
      binOp() expressionPrime()
    | {}
}

void fragment() : {Token t;}
{
     rIdent() fragmentPrime() expressionPrime()
   | t = <MIN> rIdent()/*@bgen(jjtree) #NegateIdent( 1) */
                        {
                          NegateIdent jjtn001 = new NegateIdent(JJTNEGATEIDENT);
                          boolean jjtc001 = true;
                          jjtree.openNodeScope(jjtn001);
                        }
                        try {
/*@egen*//*@bgen(jjtree)*/
                        {
                          jjtree.closeNodeScope(jjtn001,  1);
                          jjtc001 = false;
                        }
/*@egen*/ {jjtn001.value = t.image;}/*@bgen(jjtree)*/
                        } finally {
                          if (jjtc001) {
                            jjtree.closeNodeScope(jjtn001,  1);
                          }
                        }
/*@egen*/                 expressionPrime()
   | number() expressionPrime()
   | t = <TRUE>/*@bgen(jjtree) Boolean */
                {
                  Boolean jjtn002 = new Boolean(JJTBOOLEAN);
                  boolean jjtc002 = true;
                  jjtree.openNodeScope(jjtn002);
                }
                try {
/*@egen*//*@bgen(jjtree)*/
                {
                  jjtree.closeNodeScope(jjtn002, true);
                  jjtc002 = false;
                }
/*@egen*/ {jjtn002.value = t.image;}/*@bgen(jjtree)*/
                } finally {
                  if (jjtc002) {
                    jjtree.closeNodeScope(jjtn002, true);
                  }
                }
/*@egen*/          expressionPrime()
   | t = <FALSE>/*@bgen(jjtree) Boolean */
                 {
                   Boolean jjtn003 = new Boolean(JJTBOOLEAN);
                   boolean jjtc003 = true;
                   jjtree.openNodeScope(jjtn003);
                 }
                 try {
/*@egen*//*@bgen(jjtree)*/
                 {
                   jjtree.closeNodeScope(jjtn003, true);
                   jjtc003 = false;
                 }
/*@egen*/ {jjtn003.value = t.image;}/*@bgen(jjtree)*/
                 } finally {
                   if (jjtc003) {
                     jjtree.closeNodeScope(jjtn003, true);
                   }
                 }
/*@egen*/          expressionPrime()
}

void fragmentPrime(): {}
{
      <LPAREN> argList()/*@bgen(jjtree) #FuncCall( 2) */
                         {
                           FuncCall jjtn001 = new FuncCall(JJTFUNCCALL);
                           boolean jjtc001 = true;
                           jjtree.openNodeScope(jjtn001);
                         }
                         try {
/*@egen*/ <RPAREN>/*@bgen(jjtree)*/
                         } finally {
                           if (jjtc001) {
                             jjtree.closeNodeScope(jjtn001,  2);
                           }
                         }
/*@egen*/             
    | {}
}

void binOp() : {Token t;}
{
      t = <ADD> expression()/*@bgen(jjtree) #ArithOp( 2) */
                             {
                               ArithOp jjtn001 = new ArithOp(JJTARITHOP);
                               boolean jjtc001 = true;
                               jjtree.openNodeScope(jjtn001);
                             }
                             try {
/*@egen*//*@bgen(jjtree)*/
                             {
                               jjtree.closeNodeScope(jjtn001,  2);
                               jjtc001 = false;
                             }
/*@egen*/ {jjtn001.value = t.image;}/*@bgen(jjtree)*/
                             } finally {
                               if (jjtc001) {
                                 jjtree.closeNodeScope(jjtn001,  2);
                               }
                             }
/*@egen*/            
    | t = <MIN> expression()/*@bgen(jjtree) #ArithOp( 2) */
                             {
                               ArithOp jjtn002 = new ArithOp(JJTARITHOP);
                               boolean jjtc002 = true;
                               jjtree.openNodeScope(jjtn002);
                             }
                             try {
/*@egen*//*@bgen(jjtree)*/
                             {
                               jjtree.closeNodeScope(jjtn002,  2);
                               jjtc002 = false;
                             }
/*@egen*/ {jjtn002.value = t.image;}/*@bgen(jjtree)*/
                             } finally {
                               if (jjtc002) {
                                 jjtree.closeNodeScope(jjtn002,  2);
                               }
                             }
/*@egen*/            
}

void compOp() : {Token t;}
{/*@bgen(jjtree) #CompOp( 2) */
    {
      CompOp jjtn001 = new CompOp(JJTCOMPOP);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
    }
    try {
/*@egen*/
    ( t = <EQUAL> expression()/*@bgen(jjtree)*/
                               {
                                 jjtree.closeNodeScope(jjtn001,  2);
                                 jjtc001 = false;
                               }
/*@egen*/ {jjtn001.value = t.image;}
    | t = <NOT_EQUAL> expression()/*@bgen(jjtree)*/
                                   {
                                     jjtree.closeNodeScope(jjtn001,  2);
                                     jjtc001 = false;
                                   }
/*@egen*/ {jjtn001.value = t.image;}
    | t = <LESS_THAN> expression()/*@bgen(jjtree)*/
                                   {
                                     jjtree.closeNodeScope(jjtn001,  2);
                                     jjtc001 = false;
                                   }
/*@egen*/ {jjtn001.value = t.image;}
    | t = <LESS_THAN_EQUAL> expression()/*@bgen(jjtree)*/
                                         {
                                           jjtree.closeNodeScope(jjtn001,  2);
                                           jjtc001 = false;
                                         }
/*@egen*/ {jjtn001.value = t.image;}
    | t = <GRTR_THAN> expression()/*@bgen(jjtree)*/
                                   {
                                     jjtree.closeNodeScope(jjtn001,  2);
                                     jjtc001 = false;
                                   }
/*@egen*/ {jjtn001.value = t.image;}
    | t = <GRTR_THAN_EQUAL> expression()/*@bgen(jjtree)*/
                                         {
                                           jjtree.closeNodeScope(jjtn001,  2);
                                           jjtc001 = false;
                                         }
/*@egen*/ {jjtn001.value = t.image;})/*@bgen(jjtree)*/
    } catch (Throwable jjte001) {
      if (jjtc001) {
        jjtree.clearNodeScope(jjtn001);
        jjtc001 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte001 instanceof RuntimeException) {
        throw (RuntimeException)jjte001;
      }
      if (jjte001 instanceof ParseException) {
        throw (ParseException)jjte001;
      }
      throw (Error)jjte001;
    } finally {
      if (jjtc001) {
        jjtree.closeNodeScope(jjtn001,  2);
      }
    }
/*@egen*/           
}

void argList()          : {/*@bgen(jjtree) ArgList */
  ArgList jjtn000 = new ArgList(JJTARGLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} 
{/*@bgen(jjtree) ArgList */
    try {
/*@egen*/
    ( nempArgList() )?/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void nempArgList() : {}
{
      rIdent() nempArgListPrime()
}

void nempArgListPrime()          : {/*@bgen(jjtree) ArgList */
  ArgList jjtn000 = new ArgList(JJTARGLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ArgList */
    try {
/*@egen*/
    (<COMMA> nempArgList())?/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

String lIdent()         : {/*@bgen(jjtree) LIdent */
                           LIdent jjtn000 = new LIdent(JJTLIDENT);
                           boolean jjtc000 = true;
                           jjtree.openNodeScope(jjtn000);
/*@egen*/String s;}
{/*@bgen(jjtree) LIdent */
    try {
/*@egen*/
    s = Ident()/*@bgen(jjtree)*/
                {
                  jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
                }
/*@egen*/ { return s; }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

String rIdent()         : {/*@bgen(jjtree) RIdent */
                            RIdent jjtn000 = new RIdent(JJTRIDENT);
                            boolean jjtc000 = true;
                            jjtree.openNodeScope(jjtn000);
/*@egen*/ String s; }
{/*@bgen(jjtree) RIdent */
    try {
/*@egen*/
    s = Ident()/*@bgen(jjtree)*/
                {
                  jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
                }
/*@egen*/ { return s; }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

String Ident()       : {/*@bgen(jjtree) Ident */
                        Ident jjtn000 = new Ident(JJTIDENT);
                        boolean jjtc000 = true;
                        jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) Ident */
    try {
/*@egen*/
    (t = <IDENT>)/*@bgen(jjtree)*/
                  {
                    jjtree.closeNodeScope(jjtn000, true);
                    jjtc000 = false;
                  }
/*@egen*/ {jjtn000.value = t.image; return t.image;}/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

String number()         : {/*@bgen(jjtree) Number */
                           Number jjtn000 = new Number(JJTNUMBER);
                           boolean jjtc000 = true;
                           jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) Number */
    try {
/*@egen*/
    (t = <NUMBER>)/*@bgen(jjtree)*/
                   {
                     jjtree.closeNodeScope(jjtn000, true);
                     jjtc000 = false;
                   }
/*@egen*/ {jjtn000.value = t.image; return t.image;}/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void openBlock()              : {/*@bgen(jjtree) #OpenBlock(true) */
  OpenBlock jjtn000 = new OpenBlock(JJTOPENBLOCK);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) #OpenBlock(true) */
    try {
/*@egen*/
    <LBRAC>/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void closeBlock()            : {/*@bgen(jjtree) CloseBlock */
  CloseBlock jjtn000 = new CloseBlock(JJTCLOSEBLOCK);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) CloseBlock */
    try {
/*@egen*/
    <RBRAC>/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}